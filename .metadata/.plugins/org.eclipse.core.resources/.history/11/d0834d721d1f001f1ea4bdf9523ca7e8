package in.microsoft.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import in.microsoft.pojos.Customer;
import in.microsoft.pojos.Product;
import in.microsoft.utils.DBUtils;

public class CartDAO 
{
	private Connection cn;
	private PreparedStatement pst1;
	private PreparedStatement pst2;
	private PreparedStatement pst3;
	private PreparedStatement pst4;
	private PreparedStatement pst5;
	private PreparedStatement pst6;
	
	public void addToCart(Product product, Customer customer, int pid, int quantity) throws SQLException, ClassNotFoundException  
	{
		cn = DBUtils.openConnection();
		pst1 = cn.prepareStatement("Insert into cart values(?,?,?,?,?)");
		pst1.setInt(1, product.getPro_id());
		pst1.setString(1, product.getPro_name());
		pst1.setDouble(3, product.getPro_price());
		pst1.setInt(4, product.getPro_quantity());
		pst1.setInt(5,  product.getPro_discount());
		pst1.execute();
		System.out.println("Adding Products");
		pst2 = cn.prepareStatement("Select * from cart where pro_id = ?");
		pst2.setInt(1, product.getPro_id());
		ResultSet rs = pst2.executeQuery();
		while(rs.next()) 
		{
			if (rs.getInt("pro_id") == pid) 
			{
				pst3 = cn.prepareStatement("Update cart set quantity = ? where c_id = ?");
				pst3.setInt(1, rs.getInt("quantity") + product.getPro_quantity());
				pst3.setString(2, customer.getUsername());
				pst3.setInt(3, product.getPro_id());
				pst3.execute();
				DBUtils.closedConnection();
				return;
				}
		DBUtils.closedConnection();
	}
	
	public Cart displayCart(Customer customer) throws SQLException, ClassNotFoundException
	{
		cn = DBUtils.openConnection();
		
		Cart cart = new Cart(customer.getUsername());
		
		pst1 = cn.prepareStatement("SELECT * FROM Cart WHERE username = ?");
		pst1.setString(1, customer.getUsername());
		ResultSet rs = pst1.executeQuery();
		
		while(rs.next()) {
			Product product = new Product(rs.getInt("pid"), rs.getString("name"), rs.getDouble("price"), 
										  rs.getInt("quantity"), rs.getDouble("discount"));
			cart.addProduct(product);
		}
		
		DBUtils.closedConnection();
		return cart;
	}
	
	public double displayBill(Cart cart) {
		double bill = 0;
		
		for (Product p : cart.getCart()) {
			bill += p.getPro_quantity() * (p.getPro_id() - p.getPro_discount());
		}
		
		return bill;
	}
	
	public List<Product> payBill(Cart cart) throws ClassNotFoundException, SQLException {
		double bill = 0;
		List<Product> ordered = new ArrayList<>();
		
		
		cn = DBUtils.openConnection();
		
		for (Product p : cart.getCart()) {
			pst5 = cn.prepareStatement("SELECT * FROM Products WHERE pid = ?");
			pst5.setInt(1, p.getPro_id());
			ResultSet res = pst5.executeQuery();
			if (res.next()) {
				if (res.getInt("quantity") >= p.getPro_quantity()) {
					ordered.add(p);
				}
			}
		}
		
		for (Product p : ordered) {
			bill += p.getPro_quantity() * (p.getPro_id() - p.getPro_discount());
		}
		
		pst2 = cn.prepareStatement("SELECT * FROM Customers WHERE username = ?");
		pst2.setString(1, cart.getUsername());
		ResultSet rs = pst2.executeQuery();
		
		if (rs.next()) {
			if (rs.getDouble("wallet") < bill) {
				DBUtils.closeConnection();
				return null;
			}
		}
		
		for (Product p : ordered) {
			pst6 = cn.prepareStatement("UPDATE Products SET quantity = quantity - ? WHERE pid = ?");
			pst6.setInt(1, p.getPro_quantity());
			pst6.setInt(2, p.getPro_id());
			pst6.execute();
		}
		
		pst3 = cn.prepareStatement("UPDATE Customers SET wallet = wallet - ? WHERE username = ?");
		pst3.setDouble(1, bill);
		pst3.setString(2, cart.getUsername());
		pst3.execute();
		
		pst4 = cn.prepareStatement("DELETE FROM Cart WHERE username = ?");
		pst4.setString(1, cart.getUsername());
		pst4.execute();
		
		return ordered;
	}
	
	public void addBalance(Customer customer, Double amount) throws SQLException, ClassNotFoundException 
	{
		cn = DBUtils.openConnection();
		
		pst3 = cn.prepareStatement("UPDATE Customers SET wallet = wallet + ? WHERE username = ?");
		pst3.setDouble(1, amount);
		pst3.execute();
		
		DBUtils.closedConnection();
	}
	
	public double displayBalance(Customer customer) throws SQLException ,ClassNotFoundException
	{
		cn = DBUtils.openConnection();
		double balance = 0;
		
		if(rs.next()) {
			balance = rs.getDouble("wallet");
		}
		
		DBUtils.closedConnection();
		return balance;
	}
}
