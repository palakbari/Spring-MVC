package in.mindcraft.service;

import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import in.mindcraft.pojo.Cart;
import in.mindcraft.pojo.Product;

@Service
public class CustomerService 
{
	private final JdbcTemplate jdbcTemplate;
	
	public CustomerService(JdbcTemplate jdbcTemplate)
	{
		this.jdbcTemplate = jdbcTemplate;
	}
	
	public Map<String, Object> addToCart(Cart cart)
	{
		String cartSql = "Insert into Cart (cart_id) values (?)";
        int cartId = jdbcTemplate.queryForObject("Select nextval('cart_seq')", int.class);
        int cartResult = jdbcTemplate.update(cartSql, cartId);

        for (Product product : cart.getCart()) 
        {
            String productSql = "Insert into Cart_Product (c_id, p_id) VALUES (?, ?)";
            jdbcTemplate.update(productSql, cartId, product.getPro_id());
        }

        Map<String, Object> response = new HashMap<>();
        if (cartResult > 0) 
        {
            response.put("status", "success");
            response.put("message", "Cart and Products Inserted Successfully!");
        } else {
            response.put("status", "error");
            response.put("message", "Failed to Insert Cart and Products!");
        }
        return response;
	}
	
	public List<Map<String, Object>> getFromCart(int cartId)
	{
		String sql = "Select p.* from Product p INNER JOIN Cart_Product cp ON p.pro_id = cp.p_id WHERE cp.c_id = ?";
        return jdbcTemplate.queryForList(sql, cartId);
	}

	public double displayBill(Cart cart)
	{
		double bill = 0;
        for (Product p : cart.getCart()) 
        {
            bill += p.getPro_quantity() * (p.getPro_id() - p.getPro_discount());
        }
        return bill;
	}
	
	public List<Product> payBill(Cart cart)
	{
        double bill = 0;
        List<Product> ordered = new ArrayList<>();

        for (Product p : cart.getCart()) 
        {
            String query = "Select * from Product where pro_id = ?";
            Product product = jdbcTemplate.queryForObject(query, new Object[]{p.getPro_id()}, this::mapRowToProduct);
            if (product != null && product.getPro_quantity() >= p.getPro_quantity()) {
                ordered.add(p);
            }
        }

        for (Product p : ordered) {
            bill += p.getPro_quantity() * (p.getPro_cost() - p.getPro_discount());
            String updateQuery = "UPDATE Product SET pro_quantity = pro_quantity - ? WHERE pro_id = ?";
            jdbcTemplate.update(updateQuery, p.getPro_quantity(), p.getPro_id());
        }

        return ordered;
    }

    private Product mapRowToProduct(ResultSet rs, int rowNum) throws SQLException {
        Product product = new Product();
        product.setPro_id(rs.getInt("pro_id"));
        product.setPro_name(rs.getString("pro_name"));
        product.setPro_cost(rs.getInt("pro_cost"));
        product.setPro_quantity(rs.getInt("pro_quantity"));
        product.setPro_discount(rs.getInt("pro_discount"));
        return product;
    }

}
